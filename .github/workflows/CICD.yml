# @format

name: CICD

on:
  push:
    branches:
      - main
    paths-ignore:
      - '**.md'
  pull_request:
    branches: [main]

env:
  runner: ubuntu-20.04
  apps: '[{"name":"slam-api","path":"./apps/slam/api"},{"name:":"slam-app","path":"./apps/slam/app"}]'
  environments: '["dev"]'

jobs:
  # appmatrixsetup:
  #   name: Prepare App Matrix
  #   runs-on: ubuntu-20.04
  #   outputs:
  #     matrix: ${{ steps.setmatrix.outputs.matrix}}
  #   steps:
  #     - name: Set Dynamic Matrix
  #       id: setmatrix
  #       run: |
  #         matrixStringifiedObject='[{"name":"slam-api","path":"./apps/slam/api"},{"name:":"slam-app","path":"./apps/slam/app"}]'
  #         echo "::set-output name=matrix::$matrixStringifiedObject"

  # envmatrixsetup:
  #   name: Prepare Environment Matrix
  #   runs-on: ubuntu-20.04
  #   outputs:
  #     matrix: ${{ steps.setmatrix.outputs.matrix}}
  #   steps:
  #     - name: Set Dynamic Matrix
  #       id: setmatrix
  #       run: |
  #         matrixStringifiedObject='{"include":[{"environment":"dev"}]}'
  #         echo "::set-output name=matrix::$matrixStringifiedObject"

  tests:
    name: Unit Tests
    # needs: appmatrixsetup
    uses: bcgov/citz-imb/.github/workflows/Test.yml@main
    with:
      APPS: ${{env.apps.name}}
      ENVIRONMENTS: ${{env.environments}}
      RUNNER: ${{env.runner}}

  # Build:
  #   name: ${{ matrix.environments }}
  #   needs: [appmatrixsetup, tests]
  #   runs-on: ubuntu-20.04
  #   strategy:
  #     matrix: ${{fromJson(needs.devmatrixsetup.outputs.matrix)}}
  #   outputs:
  #     registry-path: ${{ steps.push-image.outputs.registry-path }}
  #     image: ${{ steps.build-image.outputs.image }}
  #     tags: ${{ steps.build-image.outputs.tags }}

  #   steps:
  #     - name: Check out Repository
  #       uses: actions/checkout@v2

  #     - name: Install node
  #       uses: actions/setup-node@v1
  #       with:
  #         node-version: '16'

  #     - name: Cache node modules
  #       id: npmCacheStep
  #       uses: actions/cache@v2
  #       env:
  #         cache-name: cache-node-modules
  #       with:
  #         path: ~/.npm
  #         key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ secrets.CACHE_VERSION }}-${{ hashFiles('**/package-lock.json') }}
  #         restore-keys: |
  #           ${{ runner.os }}-build-${{ env.cache-name }}-${{ secrets.CACHE_VERSION }}-
  #           ${{ runner.os }}-build-${{ env.cache-name }}-
  #           ${{ runner.os }}-build-
  #           ${{ runner.os }}-

  #     - name: Install packages
  #       if: steps.npmCacheStep.outputs.cache-hit != 'true'
  #       run: npm install --production --silent

  #     - name: Install Nx package
  #       run: npm install @nrwl/cli --silent

  #     - name: Build application
  #       run: npx nx build  ${{ matrix.app.name }}

  #     - name: Build container
  #       id: build-image
  #       uses: redhat-actions/buildah-build@v2
  #       with:
  #         image: ${{ matrix.app.name }}
  #         containerfiles: ${{ matrix.app.path }}/Dockerfile

  #     - name: Push to registry
  #       id: push-image
  #       uses: redhat-actions/push-to-registry@v2
  #       with:
  #         image: ${{ steps.build-image.outputs.image }}
  #         tags: ${{ steps.build-image.outputs.tags }}
  #         registry: ghcr.io/${{ github.repository_owner }}
  #         username: ${{ github.actor }}
  #         password: ${{ github.token }}
