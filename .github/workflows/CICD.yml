# @format

name: CICD

on:
  push:
    branches:
      - main
    paths-ignore:
      - '**.md'
  pull_request:
    branches: [main]

env:
  runner: ubuntu-20.04

jobs:
  matrixsetup:
    name: Setup App Matrix
    runs-on: ubuntu-20.04
    outputs:
      matrix: ${{ steps.setmatrix.outputs.matrix}}
    steps:
      - name: Set Dynamic Matrix
        id: setmatrix
        run: |
          matrixStringifiedObject='{"include":[{"app":{"name":"slam-api","path":"./apps/slam/api"}},{"app":{"name:":"slam-app","path":"./apps/slam/app"}}]}'
          echo "::set-output name=matrix::$matrixStringifiedObject"

  test:
    name: Unit Tests
    needs: matrixsetup
    runs-on: ubuntu-20.04
    strategy:
      matrix: ${{fromJson(needs.matrixsetup.outputs.matrix)}}
    steps:
      - name: Matrix Info
        run: echo Run matrix.app.name
      - name: Dump GitHub context
        env:
          GITHUB_CONTEXT: ${{ toJSON(github) }}
        run: echo "$GITHUB_CONTEXT"
      - name: Dump job context
        env:
          JOB_CONTEXT: ${{ toJSON(job) }}
        run: echo "$JOB_CONTEXT"
      - name: Dump steps context
        env:
          STEPS_CONTEXT: ${{ toJSON(steps) }}
        run: echo "$STEPS_CONTEXT"
      - name: Dump runner context
        env:
          RUNNER_CONTEXT: ${{ toJSON(runner) }}
        run: echo "$RUNNER_CONTEXT"
      - name: Dump strategy context
        env:
          STRATEGY_CONTEXT: ${{ toJSON(strategy) }}
        run: echo "$STRATEGY_CONTEXT"
      - name: Dump matrix context
        env:
          MATRIX_CONTEXT: ${{ toJSON(matrix) }}
        run: echo "$MATRIX_CONTEXT"
      - name: Dump env context
        env:
          ENV_CONTEXT: ${{ toJSON(env) }}
        run: echo "$ENV_CONTEXT"

  Build:
    name: ${{ inputs.ENVIRONMENT }}
    needs: matrixsetup
    runs-on: ubuntu-20.04
    strategy:
      matrix: ${{fromJson(needs.matrixsetup.outputs.matrix)}}
    outputs:
      registry-path: ${{ steps.push-image.outputs.registry-path }}
      image: ${{ steps.build-image.outputs.image }}
      tags: ${{ steps.build-image.outputs.tags }}

    steps:
      - name: Check out Repository
        uses: actions/checkout@v2

      - name: Install node
        uses: actions/setup-node@v1
        with:
          node-version: '16'

      - name: Cache node modules
        id: npmCacheStep
        uses: actions/cache@v2
        env:
          cache-name: cache-node-modules
        with:
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ secrets.CACHE_VERSION }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-${{ secrets.CACHE_VERSION }}-
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      - name: Install packages
        if: steps.npmCacheStep.outputs.cache-hit != 'true'
        run: npm install --production --silent

      - name: Install Nx package
        run: npm install @nrwl/cli --silent

      - name: Build application
        run: npx nx build  ${{ inputs.APP_NAME }}

      - name: Build container
        id: build-image
        uses: redhat-actions/buildah-build@v2
        with:
          image: ${{ matrix.app.name }}
          containerfiles: ${{ matrix.app.path }}/Dockerfile

      - name: Push to registry
        id: push-image
        uses: redhat-actions/push-to-registry@v2
        with:
          image: ${{ steps.build-image.outputs.image }}
          tags: ${{ steps.build-image.outputs.tags }}
          registry: ghcr.io/${{ github.repository_owner }}
          username: ${{ github.actor }}
          password: ${{ github.token }}